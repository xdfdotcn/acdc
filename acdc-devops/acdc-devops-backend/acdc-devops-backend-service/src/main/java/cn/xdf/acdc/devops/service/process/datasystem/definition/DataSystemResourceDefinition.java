package cn.xdf.acdc.devops.service.process.datasystem.definition;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import cn.xdf.acdc.devops.core.domain.entity.enumeration.DataSystemResourceType;
import lombok.Getter;
import lombok.Setter;

/**
 * Definition of a data system resource.
 */
@Getter
@Setter
public class DataSystemResourceDefinition {

    private Map<String, ConfigurationDefinition<?>> configurationDefinitions = new HashMap<>();

    private DataSystemResourceType type;

    /**
     * Represent if this resource is configured by user (such as cluster, instance) or dynamic generated by acdc (such as database, table).
     */
    private boolean dynamic;

    private boolean hasDataCollectionChild;

    private boolean dataCollection;

    private Map<DataSystemResourceType, DataSystemResourceDefinition> children = new HashMap<>();

    public DataSystemResourceDefinition(
            final DataSystemResourceType type,
            final boolean dynamic,
            final boolean hasDataCollectionChild,
            final boolean dataCollection) {
        this(new HashMap<>(), type, dynamic, hasDataCollectionChild, dataCollection, new HashMap<>());
    }

    public DataSystemResourceDefinition(
            final Map<String, ConfigurationDefinition<?>> configurationDefinitions,
            final DataSystemResourceType type,
            final boolean dynamic,
            final boolean hasDataCollectionChild,
            final boolean dataCollection) {
        this(configurationDefinitions, type, dynamic, hasDataCollectionChild, dataCollection, new HashMap<>());
    }

    public DataSystemResourceDefinition(
            final DataSystemResourceType type,
            final boolean dynamic,
            final boolean hasDataCollectionChild,
            final boolean dataCollection,
            final Map<DataSystemResourceType, DataSystemResourceDefinition> children) {
        this(new HashMap<>(), type, dynamic, hasDataCollectionChild, dataCollection, children);
    }

    public DataSystemResourceDefinition(
            final Map<String, ConfigurationDefinition<?>> configurationDefinitions,
            final DataSystemResourceType type,
            final boolean dynamic,
            final boolean hasDataCollectionChild,
            final boolean dataCollection,
            final Map<DataSystemResourceType, DataSystemResourceDefinition> children) {
        this.type = type;
        this.dynamic = dynamic;
        this.hasDataCollectionChild = hasDataCollectionChild;
        this.dataCollection = dataCollection;

        if (Objects.nonNull(configurationDefinitions)) {
            this.configurationDefinitions.putAll(configurationDefinitions);
        }

        if (Objects.nonNull(children)) {
            this.children.putAll(children);
        }
    }
}
